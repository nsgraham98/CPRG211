@page "/prodList"

@using DemoMod9SQLiteWithoutExtension.Data
@using DemoMod9SQLiteWithoutExtension.Services
@inject ProductService prodService
@inject NavigationManager navManager

<h3>ProductList</h3>

@if (prodList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-success" @onclick="AddNewProduct">Add New Product </button>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prod in prodList)
            {
                <tr>
                    <td>@prod.ProdId</td>
                    <td>@prod.Name</td>
                    <td>@prod.Quantity</td>
                    <td>@prod.Price</td>
                    <td>
                        <button class="btn btn-info" @onclick=@(() => UpdateProduct(prod))>Edit</button>
                        <button class="btn btn-info" @onclick=@(() => DeleteProduct(prod))>Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    public IEnumerable<ProductInfo> prodList;

    protected override async Task OnInitializedAsync()
    {
        prodList = await prodService.GetProductAsync();
    }

    public void AddNewProduct()
    {
        navManager.NavigateTo("addUpdateProduct");
    }

    public void UpdateProduct(ProductInfo prodInfo)
    {
        navManager.NavigateTo($"updateProduct/{prodInfo.ProdId}");
    }

    public async void DeleteProduct(ProductInfo prodInfo)
    {
        await prodService.DeleteProductAsync(prodInfo.ProdId);
        prodList = await prodService.GetProductAsync();
        this.StateHasChanged();
    }
}
